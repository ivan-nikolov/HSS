@using Hss.Services.Models.Orders
@using Hss.Web.ViewModels.Components.RazorComponents.Dashboard.Addresses
@using Hss.Web.ViewModels.Components.RazorComponents.Orders
@using Hss.Web.Components.RazorComponents.Dashboard

@inject Hss.Services.Data.Addresses.IAddressesService AddressesService
@inject Hss.Services.Data.Services.IServicesService ServicesService
@inject Hss.Services.Data.Orders.IOrdersService OrdersService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject Hss.Services.Notifier.Notifier Notifier
@inject IJSRuntime JSRuntime



<BlazoredModal />
<div class="row h-100 mt-5">
    <div class="col-8 border-right">
        <CascadingAuthenticationState>
            <AddressesList CanSelectAddress="true" OnAddressSelect="this.SelectAddress"></AddressesList>
        </CascadingAuthenticationState>
        <EditForm EditContext="this.editContext" OnSubmit="HandleValidSubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary style="color: red" />

            @if (this.services.Count > 0)
            {
                <div class="mt-5 form-group">
                    <label for="ServiceId">Select Sevice</label>
                    <select class="form-control" @bind="@this.input.ServiceId">
                        <option selected="@true.ToString()" value="">Select service</option>
                        @foreach (var service in this.services)
                        {
                            <option value="@service.Id">@service.Name</option>
                        }

                    </select>
                </div>
            }
            @if (this.SelectedService.IsRecurrent)
            {
                <div class="form-group">
                    <label for="ServiceFrequency">Service Frequency</label>
                    <InputSelect class="form-control" @bind-Value="input.ServiceFrequency">
                        <option value="Once">Once</option>
                        <option value="Daily">Daily</option>
                        <option value="Weekly">Weekly</option>
                        <option value="Monthly">Monthly</option>
                    </InputSelect>
                </div>
            }
            @if (this.SelectedService.Name != null)
            {
                <div class="form-group">
                    <InputDate @bind-Value="this.input.AppointmentDate" type="text" class="form-control"></InputDate>
                </div>

                <HoursList SelecteServiceId="input.ServiceId" SelectedDate="this.input.AppointmentDate" CityId="this.selectedAddress.CityId" WorkingHours="workingHours" HourChanged="this.OnHourSelect" ServiceDuration="this.SelectedService.DurationInHours" IsSubmitted="this.isSubmited" ServiceFrequency="this.SelectedService.ServiceFrequency"></HoursList>
            }
            <div class="mt-4">
                <button style="display: @this.submitButtonDisplay" class="btn btn-lg btn-outline-primary" type="submit">Book Service</button>
            </div>
        </EditForm>
    </div>
    <div class="col-4">
        <CurrentOrder SelectedAddress="this.selectedAddress" DisplayHour="@this.submitButtonDisplay" Order="@this.input" SelectedService="this.SelectedService"></CurrentOrder>
    </div>
</div>

@code {
    private const int workingHours = 11;
    private EditContext editContext;
    private bool isSubmited = false;

    private string submitButtonDisplay = "none";
    private AddressViewModel selectedAddress;
    private CreateOrderInputModel input;
    private List<ServiceInputModel> services;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public ServiceInputModel SelectedService
    {
        get
        {
            if (this.services.Any(s => s.Id == input.ServiceId))
            {
                return this.services.FirstOrDefault(s => s.Id == input.ServiceId);
            }

            return new ServiceInputModel();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.input = new CreateOrderInputModel() { AppointmentDate = DateTime.UtcNow.Date };
        this.editContext = new EditContext(this.input);

        this.selectedAddress = new AddressViewModel();
        this.services = new List<ServiceInputModel>();

        var userId = (await this.AuthenticationStateProvider.GetAuthenticationStateAsync()).User.GetId();
        this.input.ClientId = userId;
    }

    private async Task HandleValidSubmitAsync()
    {
        var isValid = this.editContext.Validate() && this.ServerValidate(editContext);
        if (isValid)
        {
            this.input.IsRecurrent = this.SelectedService.IsRecurrent;
            this.input.ServiceDuration = this.SelectedService.DurationInHours;
            this.isSubmited = true;
            var orderId = await this.OrdersService.CreateAsync(this.input.To<OrderServiceModel>());
            NavManager.NavigateTo("/Accounts/Dashboard", true);
        }
    }

    private bool ServerValidate(EditContext editContext)
    {
        var serverChecksValid = this.AddressesService.CheckIfAddressIsValidForUser(this.input.AddressId, this.input.ClientId)
            && this.ServicesService.CheckIfServiceExists(this.input.ServiceId)
            && this.input.AppointmentDate.Hour >= 8
            && this.input.AppointmentDate.Hour <= 18;

        return serverChecksValid;
    }

    private void SelectAddress(AddressViewModel address)
    {
        this.selectedAddress = address;
        this.input.AddressId = selectedAddress.Id;
        this.input.ServiceId = default;
        input.CityId = address.CityId;
        this.services = this.ServicesService
            .GetAllByTeamCity<ServiceInputModel>(address.CityId)
            .ToList();
    }

    private void OnHourSelect(int hour)
    {
        this.submitButtonDisplay = "block";
        this.input.AppointmentDate = input.AppointmentDate.Date.AddHours(hour);
    }
}
