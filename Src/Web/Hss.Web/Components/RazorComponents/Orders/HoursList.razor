@using Hss.Data.Models.Enums
@using Hss.Web.ViewModels.Components.RazorComponents.Orders
@inject Hss.Services.Data.Teams.ITeamsService TeamsService

@if (this.hours == null)
{
    <p>Loading</p>
}
else
{
    foreach (var hour in this.hours)
    {

        var disabled = !hour.IsFree;
        string active = string.Empty;
        if (hour.Hour == this.selectedHour)
        {
            active = "active";
        }

        <button type="button" disabled="@disabled" class="btn btn-outline-info @active" @onclick="@(e => this.OnHourSelect(hour.Hour))">@hour.Hour:00</button>
    }
}

@code {
    private const int workdayStartHour = 8;
    private List<HourViewModel> hours;
    private int selectedHour;

    [Parameter]
    public int WorkingHours { get; set; }

    [Parameter]
    public int ServiceDuration { get; set; }

    [Parameter]
    public EventCallback<int> HourChanged { get; set; }

    [Parameter]
    public bool IsSubmitted { get; set; }

    [Parameter]
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public int SelecteServiceId { get; set; }

    [Parameter]
    public int CityId { get; set; }

    [Parameter]
    public ServiceFrequency ServiceFrequency { get; set; }

    protected override void OnInitialized()
    {
        this.hours = new List<HourViewModel>();
    }

    protected override void OnParametersSet()
    {
        if (!this.IsSubmitted)
        {
            this.hours = new List<HourViewModel>();
            var workingHours = Enumerable.Range(workdayStartHour, WorkingHours);
            var date = SelectedDate.Date;
            foreach (var hour in workingHours)
            {
                this.hours.Add(new HourViewModel()
                {
                    Hour = hour,
                    IsFree = this.TeamsService.HasFreeTeams(date.AddHours(hour), date.AddHours(hour + ServiceDuration), this.CityId, this.SelecteServiceId, this.ServiceFrequency),
                });
            }
        }
    }

    private async Task OnHourSelect(int hour)
    {
        this.selectedHour = hour;
        await this.HourChanged.InvokeAsync(hour);
    }
}
