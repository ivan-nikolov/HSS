@inject Hss.Services.Data.Countries.ICountriesService CountryService
@inject Hss.Services.Data.CIties.ICitiesService CityService
@inject Hss.Services.Data.Addresses.IAddressesService AddressService
@inject Hss.Services.BlazorModal.IModalService ModalService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Hss.Services.Models.Addresses
@using Hss.Web.Components.RazorComponents.Locations
@using Hss.Web.ViewModels.Components.RazorComponents.Dashboard.Addresses

@if (this.ShowForm)
{
    <EditForm Model="@this.Address" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary style="color: red"/>

        <SelectCityDropDown @bind-CountryId="@Address.CountryId" @bind-CityId="@Address.CityId"></SelectCityDropDown>

        <div class="form-group">
            <label>
                Neighborhood:
                <InputText class="form-control" id="Neighborhood" @bind-Value="Address.Neighborhood" />
            </label>
        </div>
        <div class="form-group">
            <label>
                PostCode:
                <InputNumber class="form-control" id="PostCode" @bind-Value="Address.PostCode" />
            </label>
        </div>
        <div class="form-group">
            <label>
                Street Name:
                <InputText class="form-control" id="StreetName" @bind-Value="Address.StreetName" />
            </label>
        </div>
        <div class="form-group">
            <label>
                Building Number:
                <InputText class="form-control" id="BuildingNumber" @bind-Value="Address.BuildingNumber" />
            </label>
        </div>
        <div class="form-group">
            <label>
                Appartment:
                <InputText class="form-control" id="Appartment" @bind-Value="Address.Appartment" />
            </label>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </EditForm>
}
else
{
    <div class="alert alert-success" role="alert">
        Address is successfuly added!
        <button class="btn btn-primary" @onclick="Done">Done</button>
    </div>
}


@code {
    private EditContext editContext;

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    [CascadingParameter]
    public BlazoredModal BlazoredModal { get; set; }

    private AddressInputModel Address { get; set; }

    bool ShowForm { get; set; } = true;
    int FormId { get; set; }

    protected override void OnInitialized()
    {
        this.Address = new AddressInputModel();
        this.editContext = new EditContext(this.Address);

        this.FormId = this.Parameters.Get<int>("FormId");
        BlazoredModal.SetTitle("Add Address");
    }

    private async Task SubmitForm()
    {
        var isValid = this.editContext.Validate()
            && await this.ServerValidate(this.editContext);

        if (!isValid)
        {
            return;
        }

        var serviceModel = this.Address.To<AddressServiceModel>();
        var userId = (await this.AuthenticationStateProvider.GetAuthenticationStateAsync()).User.GetId();
        serviceModel.UserId = userId;
        await this.AddressService.CreateAsync(serviceModel);

        this.ShowForm = false;
    }

    private void Done()
    {
        this.ModalService.Close(ModalResult.Ok("Form submitted"));
    }

    private void Cancel()
    {
        this.ModalService.Cancel();
    }

    private async Task<bool> ServerValidate(EditContext editContext)
    {
        var serverChecksValid = await this.CountryService.CheckIfCountryExists(this.Address.CountryId)
            && await this.CityService.CheckIfCityExistsAsync(this.Address.CityId);

        return serverChecksValid;
    }
}
